import React from 'react';
import './TokenEconomics.css';

interface TokenConfig {
  symbol: string;
  initialSupply: number;
  communityAllocation: number;
  performanceFee: number;
}

interface TokenEconomicsProps {
  tokenConfig: TokenConfig;
  setTokenConfig: React.Dispatch<React.SetStateAction<TokenConfig>>;
  nextStep: () => void;
  prevStep: () => void;
}

const TokenEconomics: React.FC<TokenEconomicsProps> = ({
  tokenConfig,
  setTokenConfig,
  nextStep,
  prevStep
}) => {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setTokenConfig({
      ...tokenConfig,
      [name]: name === 'symbol' ? value : Number(value)
    });
  };

  const handleAllocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = Number(e.target.value);
    setTokenConfig({
      ...tokenConfig,
      communityAllocation: value
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    nextStep();
  };

  return (
    <div className="token-economics-container">
      <h2 className="config-section-title">Token Economics</h2>
      
      <form onSubmit={handleSubmit} className="token-form">
        <div className="form-section">
          <div className="form-group">
            <label htmlFor="token-name">Token Name</label>
            <input
              id="token-name"
              type="text"
              placeholder="e.g. ThetaToken"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="token-symbol">Token Symbol</label>
            <input
              id="token-symbol"
              type="text"
              name="symbol"
              value={tokenConfig.symbol}
              onChange={handleChange}
              placeholder="e.g. THETA"
              maxLength={5}
              required
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="initial-supply">Initial Token Supply</label>
            <div className="input-with-suffix">
              <input
                id="initial-supply"
                type="number"
                name="initialSupply"
                value={tokenConfig.initialSupply}
                onChange={handleChange}
                min="1000000"
                max="1000000000"
                step="1000000"
                required
              />
              <span className="input-suffix">Tokens</span>
            </div>
          </div>
        </div>
        
        <div className="form-section">
          <div className="form-group">
            <label>Token Allocation</label>
            <div className="token-allocation-slider">
              <div className="allocation-label">Community</div>
              <div className="allocation-slider-container">
                <input
                  type="range"
                  min="50"
                  max="90"
                  value={tokenConfig.communityAllocation}
                  onChange={handleAllocationChange}
                  className="allocation-slider"
                />
                <div className="allocation-value">{tokenConfig.communityAllocation}%</div>
              </div>
              <div className="allocation-range">
                <span>50% (Min)</span>
                <span>90% (Max)</span>
              </div>
            </div>
          </div>
          
          <div className="form-group">
            <label htmlFor="performance-fee">Performance Fee</label>
            <div className="input-with-suffix">
              <input
                id="performance-fee"
                type="number"
                name="performanceFee"
                value={tokenConfig.performanceFee}
                onChange={handleChange}
                min="0"
                max="50"
                required
              />
              <span className="input-suffix">%</span>
            </div>
            <div className="input-help">Fee charged on profits generated by your agent</div>
          </div>
        </div>
        
        <div className="token-distribution">
          <h3>Token Distribution Preview</h3>
          <div className="distribution-chart-container">
            <div className="distribution-chart">
              <div 
                className="distribution-segment community" 
                style={{ width: `${tokenConfig.communityAllocation}%` }}
              ></div>
              <div 
                className="distribution-segment creator" 
                style={{ width: `${100 - tokenConfig.communityAllocation}%` }}
              ></div>
            </div>
            <div className="distribution-legend">
              <div className="legend-item">
                <div className="legend-color community"></div>
                <div className="legend-details">
                  <span className="legend-label">Community</span>
                  <span className="legend-value">{tokenConfig.communityAllocation}%</span>
                  <span className="legend-supply">{Math.round(tokenConfig.initialSupply * tokenConfig.communityAllocation / 100).toLocaleString()} tokens</span>
                </div>
              </div>
              <div className="legend-item">
                <div className="legend-color creator"></div>
                <div className="legend-details">
                  <span className="legend-label">Creator (You)</span>
                  <span className="legend-value">{100 - tokenConfig.communityAllocation}%</span>
                  <span className="legend-supply">{Math.round(tokenConfig.initialSupply * (100 - tokenConfig.communityAllocation) / 100).toLocaleString()} tokens</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="revenue-model">
          <h3>Revenue Model</h3>
          <div className="revenue-info">
            <div className="revenue-item">
              <div className="revenue-icon">ðŸ’°</div>
              <div className="revenue-details">
                <h4>Performance Fee</h4>
                <p>{tokenConfig.performanceFee}% of profits from trading operations</p>
              </div>
            </div>
            <div className="revenue-item">
              <div className="revenue-icon">ðŸ“ˆ</div>
              <div className="revenue-details">
                <h4>Token Value</h4>
                <p>Value increases with trading performance and investor demand</p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="token-actions">
          <button type="button" className="back-button" onClick={prevStep}>
            Back
          </button>
          <button type="submit" className="next-button">
            Review & Launch
          </button>
        </div>
      </form>
    </div>
  );
};

export default TokenEconomics;